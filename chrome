# Design Review Chrome Extension
DesignReview is a tool for creatives, managers, people who want to visually alter a web page, make a screenshot, and discuss with colleagues.

## Purpose
It was created as part of a tutorial on creating chrome extensions which showcase communication between `popup` and `contentscript` and `contentscript` to `backgroundscript`. 

## Result

The result is a chrome extension that enables the "hidden" designMode in chrome and after you are done you can take a screenshot with the edits on the page.

###### styles.css #####

#container {
 display: flex;
 flex-direction: column;
 width: 150px;
}

#take-screenshot-btn {
    width: 100%;
    background-color: #ff0000;
    color: #FFFFFF;
    border: none;
    font-size: 14px;
    border-radius: 5px;
    padding: 5px;
    margin-top: 10px;
}


###### popup.js ####
let state

const toggleDesignMode = () => {
  broadcast({ type: 'toggle-designmode' })
}
const takeScreenshot = () => {
  broadcast({ type: 'capture' })
}

const broadcast = message => {
  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
    chrome.tabs.sendMessage(tabs[0].id, message, function (response) {
      console.log(response)
      if (!response) return

      switch (response.type) {
        case 'toggle-designmode':
          document.getElementById('toggle-design-mode-btn').innerHTML =
            response.payload === 'on' ? 'Disable' : 'Enable'
          break
        case 'get-state':
          state = response.payload

          document.getElementById('toggle-design-mode-btn').innerHTML =
            state.designMode === 'on' ? 'Disable' : 'Enable'
          break
        default:
          break
      }
    })
  })
}

const init = () => {
  broadcast({ type: 'get-state' })
}

document.getElementById('toggle-design-mode-btn').onclick = toggleDesignMode
document.getElementById('take-screenshot-btn').onclick = takeScreenshot

window.onload = () => {
  init()
}


###### popup.html ####
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link rel="stylesheet" href="./styles.css">
</head>

<body>
    <div id="container">
        <div>
            <span>Design mode?</span>
            <button id="toggle-design-mode-btn">Enable</button>
        </div>

        <button id="take-screenshot-btn">Take screenshot</button>
    </div>

    <script src="popup.js"></script>
</body>

</html>


#### manifest.json ###

{
    "name": "DesignReview",
    "version": "0.0.1",
    "description": "DesignReview is a tool for creatives, managers, people who want to visually alter a web page, make a screenshot, and discuss with colleagues.",
    "manifest_version": 2,
    "permissions": [
        "activeTab"
    ],
    "background": {
        "persistent": false,
        "scripts": [
            "background.js"
        ]
    },
    "browser_action": {
        "default_title": "DesignReview",
        "default_popup": "popup.html"
    },
    "content_scripts": [
        {
            "matches": [
                "https://*/*"
            ],
            "css": [
                "styles.css"
            ],
            "js": [
                "contentScript.js"
            ],
            "run_at": "document_idle"
        }
    ]
}


#### contentScript.js ####
let canvas
let ctx

const drawImage = dataURI => {
  if (!canvas) {
    canvas = document.createElement('canvas')
    canvas.width = window.innerWidth
    canvas.height = window.innerHeight
    ctx = canvas.getContext('2d')
  }

  const image = new Image()

  image.onload = () => {
    ctx.drawImage(image, 0, 0)
    download()
  }
  image.src = dataURI
}

const download = () => {
  const link = document.createElement('a')
  link.download = 'screenshot.png'
  link.href = canvas.toDataURL()
  link.click()
}

const getState = () => {
  const state = sessionStorage.getItem('state')

  return {
    type: 'get-state',
    payload: state ? JSON.parse(state) : { designMode: document.designMode }
  }
}

const saveState = payload => {
  sessionStorage.setItem('state', JSON.stringify(payload))
}

const toggleDesignMode = () => {
  document.designMode = document.designMode === 'off' ? 'on' : 'off'
  saveState({ designMode: document.designMode })

  return { type: 'toggle-designmode', payload: document.designMode }
}

const captureVisibleTab = () => {
  chrome.runtime.sendMessage({ type: 'captureVisibleTab' })
}

/** TRANSPORT LAYER */
const actions = {
  'toggle-designmode': toggleDesignMode,
  'get-state': getState,
  capture: captureVisibleTab,
  drawImage: drawImage
}

chrome.runtime.onMessage.addListener((request, sender, response) => {
  const reply = actions[request.type] && actions[request.type](request.payload)
  reply && response(reply)
})
/** END TRANSPORT LAYER */


### background.js ###
chrome.runtime.onMessage.addListener((request, sender) => {
  chrome.tabs.captureVisibleTab(null, { format: 'png' }, dataURI => {
    replyBacktoContentScript('drawImage', dataURI)
  })
})

const replyBacktoContentScript = (type, payload) => {
  chrome.tabs.query({ active: true, currentWindow: true }, tabs => {
    chrome.tabs.sendMessage(tabs[0].id, { type: 'drawImage', payload })
  })
}
